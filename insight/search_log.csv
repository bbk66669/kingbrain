"有哪些地方用到了 error_handling","/root/kk/src/agent/agent_stub.py","def","v1",21,52,0.70531565
"有哪些地方用到了 error_handling","/root/kk/src/optimizer.py","def","v1",6,29,0.7211423
"有哪些地方用到了 error_handling","/root/kk/src/agent/agent_stub.py","def","v1",18,52,0.73162663
"有哪些地方用到了 error_handling","/root/kk/src/agent/agent_decide_and_execute.py","def","v1",66,84,0.73271453
"有哪些地方用到了 error_handling","/root/kk/src/agent/agent_stub.py","content","v1",21,52,0.7103833
"有哪些地方用到了 error_handling","/root/windking/ingest/collector.py","content","v1",39,50,0.7332032
"有哪些地方用到了 error_handling","/root/kk/src/agent/agent_stub.py","content","v1",18,52,0.74511653
"有哪些地方用到了 error_handling","/root/kk/src/optimizer.py","content","v1",6,29,0.7453034
"有哪些地方用到了 error_handling","/root/kk/src/agent/agent_decide_and_execute.py","content","v1",66,84,0.7341348
"有哪些地方用到了 error_handling","ANSWER","信息不足。在提供的代码片段中，没有明确显示关于错误处理（error_handling）的具体实现细节，如异常捕获（try-except）或错误日志记录等。需要更多代码或上下文来确定错误处理的具体实现。"
"有哪些地方用到了 error_handling","/root/kk/src/agent/agent_stub.py","def","v1",21,52,0.70535296
"有哪些地方用到了 error_handling","/root/kk/src/optimizer.py","def","v1",6,29,0.72119516
"有哪些地方用到了 error_handling","/root/kk/src/agent/agent_stub.py","def","v1",18,52,0.7316861
"有哪些地方用到了 error_handling","/root/kk/src/agent/agent_decide_and_execute.py","def","v1",66,84,0.7327748
"有哪些地方用到了 error_handling","/root/kk/src/agent/agent_stub.py","content","v1",21,52,0.7103833
"有哪些地方用到了 error_handling","/root/windking/ingest/collector.py","content","v1",39,50,0.7332032
"有哪些地方用到了 error_handling","/root/kk/src/agent/agent_stub.py","content","v1",18,52,0.74511653
"有哪些地方用到了 error_handling","/root/kk/src/optimizer.py","content","v1",6,29,0.7453034
"有哪些地方用到了 error_handling","/root/kk/src/agent/agent_decide_and_execute.py","content","v1",66,84,0.7341348
"有哪些地方用到了 error_handling","ANSWER","信息不足。在提供的代码片段中，没有明确显示关于错误处理（error handling）的具体实现细节，如异常捕获（try-except）或错误日志记录。需要更详细的代码或描述来确定错误处理的具体实现。"
"ws_main 里_load_balance 的作用是什么","/root/kk/ws_main.py","def","v1",57,74,0.44684672
"ws_main 里_load_balance 的作用是什么","/root/kk/ws_main.py","content","v1",57,74,0.46982557
"ws_main 里_load_balance 的作用是什么","/root/kk/src/optimizer.py","def","v1",6,29,0.6703056
"ws_main 里_load_balance 的作用是什么","/root/kk/ws_main.py","def","v1",151,195,0.6500961
"ws_main 里_load_balance 的作用是什么","/root/kk/src/optimizer.py","content","v1",6,29,0.69802105
"ws_main 里_load_balance 的作用是什么","/root/kk/ws_main.py","content","v1",151,195,0.65288407
"ws_main 里_load_balance 的作用是什么","ANSWER","`_load_balance` 函数的作用是获取并返回当前账户的 USDT 余额。该函数首先检查一个全局缓存 `_BAL_CACHE`，如果缓存中的时间戳与当前时间的差小于30秒，则直接返回缓存中的余额值。如果时间差大于30秒，函数会创建一个账户API客户端，使用环境变量中的API密钥和其他相关信息，然后尝试获取账户的USDT余额。如果在获取余额的过程中发生异常，余额将被设置为0.0。成功获取余额后，该值会被设置到一个全局变量 `equity_usdt` 中，并返回该余额值。这个过程允许系统在短时间内多次调用时避免频繁的API请求，提高效率和响应速度。"
